#!/usr/bin/env bash

parse_cmdline()
{
    all_branches=0
    test $(basename "$0") = "git-make-bundles" && all_branches=1

    if [[ -z $1 ]]; then
        echo "Must specify commit ID" >&2
        return 1
    fi
    commit=$1
    shift

    if [[ -n $1 ]]; then
        branch=$1
    else
        branch="master"
    fi
}

get_repo_name()
{
    local rootdir
    rootdir=$(git rev-parse --show-toplevel) || return 1

    local multclones=$1

    if [[ $multclones = "true" ]]; then
        reponame=$(basename "$(dirname "$rootdir")" | cut -d '.' -f 2-)
    else
        reponame=$(basename "$rootdir")
    fi
}

get_branches()
{
    local tmp

    if [[ $all_branches = 0 ]]; then
        branches="$branch"
        return 0
    fi

    tmp=$(git branch) || return 1

    while IFS= read -r line; do
        branches+="${line##??} "
    done < <(echo "$tmp")
}

get_bundle_path()
{
    bundle_path=$(git config user.bundleOut) || return 1
}

if ! declare -A branch_excl_set 2>/dev/null; then
    echo "bash version 4.0 or greater is required" >&2
    exit 1
fi

multclones=$(git config user.multClones)

set -e

parse_cmdline "$@"

get_repo_name "$multclones"
get_branches
get_bundle_path

set +e

branches_excl=$(git config user.branchesExcl)
for b in $branches_excl; do
    branch_excl_set[$b]=1
done

ret=0
for b in $branches; do
    if [[ ${branch_excl_set[$b]} -ne 1 ]]; then
        bname="$reponame"
        test $b != "master" && bname+=".$b"
        git bundle create "$bundle_path/$bname.bundle" "$commit..$b" || ret=1
    fi
done

exit $ret
