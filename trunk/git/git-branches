#!/usr/bin/env bash

get_branches()
{
    local tmp

    tmp=$(git branch)
    if [[ $? != 0 ]]; then
        return 1
    fi

    while IFS= read -r line; do
        b="${line##??}"
        branches+="$b "
    done < <(echo "$tmp")
}

do_sync()
{
    orig_branch=$(git rev-parse --abbrev-ref HEAD)
    cur_branch=$orig_branch

    ret=0
    for b in $branches; do
        if [[ $b = "master" ]] || [[ ${branch_excl_set[$b]} = 1 ]]; then
            continue
        fi
        cmd="git reset --hard $1"
        if [[ $b != $cur_branch ]]; then
            cmd="git checkout $b && $cmd"
        fi
        eval echo \"Running \\\"$cmd\\\"\" 1>&2
        read -p "Run command? (y/n/q) "
        if [[ $REPLY = "y" ]]; then
            eval $cmd || ret=1
            cur_branch=$b
        else
            echo "Branch $b not reset" 1>&2
            case $REPLY in
                *q* | *Q*)
                    break
                    ;;
            esac
        fi
    done

    [[ $cur_branch != $orig_branch ]] && git checkout $orig_branch

    exit $ret
}

sync_with_origin()
{
    do_sync "$origin/\$b"
}

sync_with_bundles()
{
    do_sync "bundle_\$b/\$b"
}

if ! declare -A branch_excl_set 2>/dev/null; then
    echo "bash version 4.0 or greater is required" 1>&2
    exit 1
fi

set -e

get_branches

set +e

cmd=$(echo $0 | cut -d '-' -f 2-)
if [[ $cmd = "sync" ]]; then
    if [[ $1 = "--bundles" ]]; then
        sync_bundles=1
    else
        sync_origin=1
    fi
fi

if [[ $sync_origin = 0 ]] || [[ $sync_bundles = 1 ]]; then
    branches_excl=$(git config user.branchesExcl)
    for b in $branches_excl; do
        branch_excl_set[$b]=1
    done
    branch_excl_set["master"]=1
fi

if [[ $sync_origin = 1 ]]; then
    origin=$(git config user.upstreamRemoteName)
    [[ $origin = "" ]] && origin="origin"

    sync_with_origin
elif [[ $sync_bundles = 1 ]]; then
    sync_with_bundles
fi

for b in $branches; do
    if [[ ${branch_excl_set[$b]} != 1 ]]; then
        echo "$b"
    fi
done
