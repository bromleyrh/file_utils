#!/bin/sh

get_cmds()
{
    cmdpre=$(git config user.installDistCmdPre)
    cmdpost=$(git config user.installDistCmdPost)
}

set_up_env()
{
    env=$(git config user.installDistEnv)
    [ $? != 0 ] && return

    old_ifs=$IFS
    IFS=";"
    for e in $env; do
        e=$(echo "$e" | sed -e 's/^[[:space:]][[:space:]]*//')
        eval export "$e"
    done
    IFS=$old_ifs
}

get_ncpus()
{
    platform=$(uname)

    case $platform in
        "Darwin" | "FreeBSD")
            ncpus=$(sysctl hw.ncpu | cut -d ' ' -f 2);;
        "Linux")
            ncpus=$(nproc);;
        *)
            ncpus=1;;
    esac
}

get_dirs()
{
    rootdir=$(git rev-parse --show-toplevel)
    [ $? != 0 ] && return 1

    distdir=$rootdir/dist
    tmpdir=/tmp/tmp
}

apply_patches()
{
    reponame=$(basename "$2")
    patchdir=$2/../patches/$reponame

    cd "$1"

    if [ -d "$patchdir" ]; then
        for i in "$patchdir"/*; do
            echo "Applying patch $i to $1"
            patch -p 2 < "$i"
        done
        autoreconf -fv
    fi

    cd - 1>/dev/null
}

do_build()
{
    ./configure "$@" # TODO: add option to set configure parameters

    make -j$ncpus check # TODO: make building tests optional
    if [ "$noroot" -eq 0 ]; then
        echo "Root privilege required to install"
        sudo make install
    else
        make install
    fi

    make distclean

    sync

    reponame=$(basename "$rootdir")
    logmsg="Installed $reponame"
    if [ -z "$*" ]; then
        logmsg="$logmsg with default configuration"
    else
        logmsg="$logmsg with configuration \"$*\""
    fi
    logger "$logmsg"
}

run_install_cmd()
{
    cmd=$(git config user.installDistCmd"${1}")

    echo "Running \"$cmd\""
    eval $cmd

    exit $?
}

case $1 in
    "--pre")
        run_install_cmd pre
        ;;
    "--post")
        run_install_cmd post
        ;;
esac

get_cmds
set_up_env
opts=$(git config user.installDistOpts)
[ $? = 0 ] && set -- $opts "$@"

cmd=$(echo "$0" | cut -d '-' -f 4-)
if [ x"$cmd" = "xcmdpre" ] || [ x"$cmd" = "xcmdpost" ]; then
    eval command="\$$cmd"
    [ -z "$command" ] && exit 0
    echo "Running \"$command\""
    eval $command
    exit $?
fi

noroot=0
if [ x"$1" = "x-r" ]; then
    noroot=1
    shift
fi

get_ncpus
get_dirs

set -e

mkdir -v $tmpdir
tar -x -f "$distdir"/*.xz -C $tmpdir -v

apply_patches $tmpdir/* "$(pwd)"

cd $tmpdir/*
if [ -n "$cmdpre" ]; then
    echo "Running \"$cmdpre\""
    eval $cmdpre
fi
do_build "$@"
if [ -n "$cmdpost" ]; then
    echo "Running \"$cmdpost\""
    eval $cmdpost
fi
cd - 1>/dev/null

rm -frv $tmpdir
